@page "/file"
@using Microsoft.CodeAnalysis.Differencing;
@using PdfToXml.Data;
@using Microsoft.AspNetCore.Http;
@using System.Security.Claims;
@using System.Text;
@using System.Text.RegularExpressions;
@using iText.Kernel.Geom;
@using iText.Kernel.Pdf;
@using iText.Kernel.Pdf.Canvas.Parser;
@using iText.Kernel.Pdf.Canvas.Parser.Data;
@using iText.Kernel.Pdf.Canvas.Parser.Filter;
@using iText.Kernel.Pdf.Canvas.Parser.Listener;
@using iText.Layout.Element;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject PdfToXml.Services.IUploadedFilesService UploadedFilesService

<AuthorizeView>
    <Authorized>

        <h3>File</h3>
        <p>Only PDF and max 2 MB</p>
        <div class="form-group">
            <InputFile OnChange="@LoadPDFFile" />
            <button class="btn btn-primary" @onclick="UploadPdfFile">Upload</button>
        </div>


        @if (uploadedPdf)
        {
            <p>PDF uploaded <a @onclick="ShowPdfFile">@pdfName</a></p>
            <div class="form-group">
                <InputFile OnChange="@LoadFile1" />
                <button class="btn btn-primary" @onclick="() => UploadOtherFile(1)">Upload</button>
            </div>
            @if (uploadedFile1)
            {
                <p>File1 uploaded <a @onclick="()=>ShowOtherFile(1)">@file1Name</a></p>
            }
            <div class="form-group">
                <InputFile OnChange="@LoadFile2" />
                <button class="btn btn-primary" @onclick="() => UploadOtherFile(2)">Upload</button>
            </div>
            @if (uploadedFile2)
            {
                <p>File1 uploaded <a @onclick="()=>ShowOtherFile(2)">@file2Name</a></p>
            }
            <button class="btn btn-primary" @onclick="Extruct">Extruct</button>

            @if (extracted)
            {
                <table>
                    <tr>
                        <th>name</th>
                        <th>type</th>
                    </tr>
                    @foreach (string person in persons)
                    {
                        <tr>
                            <td class="person">@person</td>
                            <td>
                                <select class="select">
                                    <option value="friendly">friendly</option>
                                    <option value="tall">tall</option>
                                    <option value="neutral">neutral</option>
                                </select>
                            </td>
                        </tr>
                    }
                </table>
            }
        }
        @foreach (string error in errors)
        {
            <li>@error</li>
        }

    </Authorized>
    <NotAuthorized>
        <p>Sorry, you are not authorized to view this content</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private int entryId;
    private bool uploadedPdf = false;
    private string pdfName = "";
    private bool uploadedFile1 = false;
    private string file1Name = "";
    private bool uploadedFile2 = false;
    private string file2Name = "";
    private List<string> errors = new List<string>();
    private bool maximumExceed = false;
    private IBrowserFile selectedPdfFile = null;
    private IBrowserFile selectedOtherFile1 = null;
    private IBrowserFile selectedOtherFile2 = null;
    private long maxFileSize = 1024 * 1024 * 2;

    private bool extracted = false;
    public List<string> persons = new List<string>();
    private byte[] _pdfFile;


    private void LoadPDFFile(InputFileChangeEventArgs e)
    {
        errors.Clear();
        selectedPdfFile = e.File;
        if (selectedPdfFile == null) errors.Add("No file selected");
        if (selectedPdfFile.ContentType != "application/pdf") errors.Add("Please select a PDF file");
        maximumExceed = selectedPdfFile.Size > maxFileSize;
        if (maximumExceed) errors.Add("Maximum filesize exceeded");
        this.StateHasChanged();
    }
    private async Task UploadPdfFile()
    {
        try
        {
            if (uploadedPdf)
            {
                errors.Add("Pdf already uploaded");
            }
            else if (errors.Count == 0)
            {
                using var memoryStream = new MemoryStream();
                var stream = selectedPdfFile.OpenReadStream(maxFileSize);
                await stream.CopyToAsync(memoryStream);
                var fileUpload = new UploadedFiles
                    {
                        PdfFileName = selectedPdfFile.Name,
                        PdfFile = memoryStream.ToArray(),
                        UserId = AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.FindFirst(ClaimTypes.NameIdentifier)?.Value
                    };
                int insertedId = await UploadedFilesService.UploadPdfFile(fileUpload);
                uploadedPdf = insertedId > 0;
                entryId = insertedId;
            }
            this.StateHasChanged();
            return;
        }
        catch (Exception ex)
        {
            errors.Add("Something wrong. " + ex.Message);
        }

    }

    private void LoadFile1(InputFileChangeEventArgs e)
    {
        errors.Clear();
        selectedOtherFile1 = e.File;
        if (selectedOtherFile1 == null) errors.Add("No file selected");
        maximumExceed = selectedOtherFile1.Size > maxFileSize;
        if (maximumExceed) errors.Add("Maximum filesize exceeded");
        this.StateHasChanged();
    }
    private void LoadFile2(InputFileChangeEventArgs e)
    {
        errors.Clear();
        selectedOtherFile2 = e.File;
        if (selectedOtherFile2 == null) errors.Add("No file selected");
        maximumExceed = selectedOtherFile2.Size > maxFileSize;
        if (maximumExceed) errors.Add("Maximum filesize exceeded");
        this.StateHasChanged();
    }
    private async Task UploadOtherFile(int fileSerial)
    {
        try
        {
            if (fileSerial == 1 && uploadedFile1)
            {
                errors.Add("File1 already uploaded");
            }
            else if (fileSerial == 2 && uploadedFile2)
            {
                errors.Add("File2 already uploaded");
            }
            else if (errors.Count == 0)
            {
                IBrowserFile file = fileSerial == 1 ? selectedOtherFile1 : selectedOtherFile2;
                using var memoryStream = new MemoryStream();
                var stream = file.OpenReadStream(maxFileSize);
                await stream.CopyToAsync(memoryStream);
                var fileUpload = new UploadedFiles
                    {
                        Id = entryId,
                        File1Name = fileSerial == 1 ? file.Name : null,
                        File1 = fileSerial == 1 ? memoryStream.ToArray() : null,
                        File2Name = fileSerial == 2 ? file.Name : null,
                        File2 = fileSerial == 2 ? memoryStream.ToArray() : null
                    };
                int inserted = await UploadedFilesService.UploadOtherFiles(fileUpload, fileSerial);
                if (fileSerial == 1)
                {
                    uploadedFile1 = inserted > 0;
                    file1Name = file.Name;
                }
                else
                {
                    uploadedFile2 = inserted > 0;
                    file2Name = file.Name;
                }
            }
            else
            {
                if (fileSerial == 1)
                {
                    uploadedFile1 = false;
                }
                else
                {
                    uploadedFile2 = false;
                }
            }
            this.StateHasChanged();
            return;
        }
        catch (Exception ex)
        {
            errors.Add("Something wrong. " + ex.Message);
        }
    }

    private async Task ShowPdfFile()
    {
        return;
    }

    private async Task ShowOtherFile(int fileSerial)
    {
        return;
    }

    private async Task Extruct()
    {
        _pdfFile = await UploadedFilesService.GetUploadedPdfById(entryId);
        MemoryStream stream = new MemoryStream(_pdfFile);

        using (PdfReader pdfReader = new PdfReader(stream))
        {
            using (PdfDocument pdfDocument = new PdfDocument(pdfReader))
            {
                //PdfTextExtractor pdfTextExtractor = new PdfTextExtractor(pdfDocument);

                float pageWidth = pdfDocument.GetPage(1).GetPageSize().GetWidth();
                float pageHeight = pdfDocument.GetPage(1).GetPageSize().GetHeight();
                Rectangle rectFull = new Rectangle(0, 50, pageWidth, pageHeight - 150);
                Rectangle rect = new Rectangle(pageWidth / 2 - 50, 50, 70, pageHeight - 150);
                TextRegionEventFilter fullFilter = new TextRegionEventFilter(rectFull);
                TextRegionEventFilter regionFilter = new TextRegionEventFilter(rect);


                for (int i = 1; i <= pdfDocument.GetNumberOfPages(); i++)
                {
                    //PdfPage page = pdfDocument.GetPage(i);
                    //FilteredEventListener listener = new FilteredEventListener();
                    //var strat = listener.AttachEventListener(new TextLocationStrategy());
                    //PdfCanvasProcessor processor = new PdfCanvasProcessor(listener);
                    //processor.ProcessPageContent(page);
                    //string pageAllText = PdfTextExtractor.GetTextFromPage(page, strat);

                    //foreach (textChunk character in strat.objectResult)
                    //{
                    //    if (character.rect.GetLeft() >= page.GetPageSize().GetWidth() / 2 - 50)
                    //    {
                    //        persons.Add(character.text);
                    //    }
                    //}

                    //foreach (TextRenderInfo info in strat.renInfos)
                    //{
                        
                    //    persons.Add(info.GetText() + " start:" + info.GetBaseline().GetStartPoint().Get(0) + " end:" + info.GetBaseline().GetEndPoint().Get(0));
                    //}


                    PdfPage page = pdfDocument.GetPage(i);
                    ITextExtractionStrategy fullStrat = new FilteredTextEventListener(new LocationTextExtractionStrategy(), fullFilter);
                    ITextExtractionStrategy strat = new FilteredTextEventListener(new LocationTextExtractionStrategy(), regionFilter);
                    string pageAllText = PdfTextExtractor.GetTextFromPage(page, fullStrat);
                    string pageFilteredText = PdfTextExtractor.GetTextFromPage(page, strat);

                    string[] lineAllTexts = pageAllText.Split('\n');
                    string[] lineTexts = pageFilteredText.Split('\n');

                    for (int j = 0; j < lineTexts.Length; j++)
                    {
                        string[] texts = lineTexts[j].Split(' ').Where(w => w == w.ToUpper()).ToArray<string>();
                        if (texts.Length == 0) continue;
                        string text = texts[0];
                        float lineWidth = text.Length;
                        if (lineTexts[j].Length < 12 && text.Length < 10 && text.Length > 2 && text.All(Char.IsLetter) && !persons.Contains(text))
                        {
                            //persons.Add(new CenterAlignedLine() { Page = page, Text = lineText });
                            persons.Add(text);
                        }
                    }


                    //PdfPage page = pdfDocument.GetPage(i);
                    ////ITextExtractionStrategy strategy = new SimpleTextExtractionStrategy();
                    //ITextExtractionStrategy extractionStrategy = new CustomTextExtractionStrategy();
                    ////ITextExtractionStrategy locationExtractionStrategy = new LocationTextExtractionStrategy();

                    //PdfCanvasProcessor parser = new PdfCanvasProcessor(extractionStrategy);
                    //parser.ProcessPageContent(page);


                    //foreach (TextRenderInfo textInfo in textInfos)
                    //{
                    //    string text = textInfo.GetText();
                    //    if (text.Length < 20 && textInfo.GetBaseline().GetStartPoint().Get(0) < page.GetPageSize().GetWidth() / 2 && textInfo.GetBaseline().GetStartPoint().Get(0) > 50)
                    //    {
                    //        //float startX = textInfo.GetBaseline().GetStartPoint().Get(0);
                    //        //float startY = textInfo.GetBaseline().GetStartPoint().Get(1);
                    //        //Console.WriteLine("Starting position of the text \"{0}\": ({1}, {2})", text, startX, startY);
                    //        persons.Add(text);
                    //    }
                    //}

                    //string pageText = PdfTextExtractor.GetTextFromPage(page);

                    //string[] lineTexts = pageText.Split('\n');
                    //foreach (string lineText in lineTexts)
                    //{

                    //    float lineWidth = lineText.Length;
                    //    float pageWidth = page.GetPageSize().GetWidth();
                    //    if ((pageWidth / 2 - lineWidth * 10) > 20)
                    //    {
                    //        //persons.Add(new CenterAlignedLine() { Page = page, Text = lineText });
                    //        persons.Add(lineText);
                    //    }
                    //}
                }
                extracted = true;
            }
        }
        this.StateHasChanged();
    }



    class TextLocationStrategy : LocationTextExtractionStrategy
    {
        public List<textChunk> objectResult = new List<textChunk>();
        public IList<TextRenderInfo> renInfos;

        //private readonly List<TextRect> _textRects = new List<TextRect>();

        //public List<TextRect> TextRects() => _textRects;


        public override void EventOccurred(IEventData data, EventType type)
        {
            if (!type.Equals(EventType.RENDER_TEXT))
                return;

            TextRenderInfo renderInfo = (TextRenderInfo)data;

            string curFont = renderInfo.GetFont().GetFontProgram().ToString();

            float curFontSize = renderInfo.GetFontSize();
            

            //IList<TextRenderInfo> text = renderInfo.GetCharacterRenderInfos();
            renInfos = renderInfo.GetCharacterRenderInfos();

            foreach (TextRenderInfo t in renInfos)
            {
                string letter = t.GetText();
                Vector letterStart = t.GetBaseline().GetStartPoint();
                Vector letterEnd = t.GetAscentLine().GetEndPoint();
                Rectangle letterRect = new Rectangle(letterStart.Get(0), letterStart.Get(1), letterEnd.Get(0) - letterStart.Get(0), letterEnd.Get(1) - letterStart.Get(1));

                if (letter != " " && !letter.Contains(' '))
                {
                    textChunk chunk = new textChunk();
                    chunk.text = letter;
                    chunk.rect = letterRect;
                    chunk.fontFamily = curFont;
                    chunk.fontSize = (int)curFontSize;
                    chunk.spaceWidth = t.GetSingleSpaceWidth() / 2f;

                    objectResult.Add(chunk);
                }
            }
            //foreach (var t in renInfos)
            //{
            //    if (string.IsNullOrWhiteSpace(t.GetText()))
            //        continue;

            //    AddTextRect(t);
            //}
        }
        //private void AddTextRect(TextRenderInfo t)
        //{
        //    var letterStart = t.GetBaseline().GetStartPoint();
        //    var letterEnd = t.GetAscentLine().GetEndPoint();

        //    var newTextRect = new TextRect(
        //        text: t.GetText(),
        //        l: letterStart.Get(0),
        //        r: letterEnd.Get(0),
        //        t: letterEnd.Get(1),
        //        b: letterStart.Get(1));

        //    _textRects.Add(newTextRect);
        //}
    }
    public class textChunk
    {
        public string text { get; set; }
        public Rectangle rect { get; set; }
        public string fontFamily { get; set; }
        public int fontSize { get; set; }
        public float spaceWidth { get; set; }
    }
}
